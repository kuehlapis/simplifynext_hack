from __future__ import annotations
from typing import List, Dict, Any, Literal
from server.agents.base_agent import BaseAgent
from pydantic import BaseModel, Field
import json
from pathlib import Path
from html import escape
from datetime import datetime



class RiskCounts(BaseModel):
    high: int = Field(0, description="Count of high risk issues")
    medium: int = Field(0, description="Count of medium risk issues")
    ok: int = Field(0, description="Count of clauses that are ok")


class FlaggedClause(BaseModel):
    id: str = Field(..., description="Unique identifier for the clause")
    category: Literal[
        "Unfair Clauses", "Your Rights", "Stamp Duty", "Legal Issues", "Financial Terms"
    ] = Field(..., description="Category of the issue")
    risk: Literal["HIGH", "MEDIUM", "OK"] = Field(
        ..., description="Risk level of the issue"
    )
    title: str = Field(..., description="Short title describing the issue")
    description: str = Field(..., description="Detailed description of the issue")
    anchor: str = Field(..., description="Reference to the clause location")


class Artifact(BaseModel):
    id: str = Field(..., description="Unique identifier for the artifact")
    name: str = Field(..., description="Display name of the artifact")
    type: Literal["ics", "email", "rider", "pdf"] = Field(
        ..., description="Type of artifact"
    )
    url: str = Field(..., description="URL to download the artifact")


class DashboardData(BaseModel):
    riskCounts: RiskCounts = Field(..., description="Summary of risk counts")
    flaggedClauses: List[FlaggedClause] = Field(
        [], description="List of flagged clauses with issues"
    )
    artifacts: List[Artifact] = Field(
        [], description="List of generated artifacts for download"
    )


class PackagerV2Agent(BaseAgent):
    """
    Packages analysis results into a format expected by the frontend dashboard.
    """

    def __init__(self):
        super().__init__()
        BASE_DIR = Path(__file__).resolve().parent   # points to server/
        self.output_dir = BASE_DIR / "outputs"
        self.output_file = self.output_dir / "dashboard_data.json"

    def package_results(
        self,
        analysis_result: Dict[str, Any],
        planner_email_output=None,
        ics_file_path=None,
    ) -> DashboardData:
        """
        Transform analysis results into the format expected by the frontend.

        Args:
            analysis_result: The analysis results from the AnalyserAgent
            planner_email_output: Optional output from PlannerAgent's email generation
            ics_file_path: Optional path to ICS file generated by PlannerAgent
        """
        # Extract risk counts from the summary
        summary = analysis_result.get("summary", {})
        risk_counts = RiskCounts(
            high=summary.get("high_risk", 0),
            medium=summary.get("medium_risk", 0),
            ok=summary.get("ok", 0),
        )

        # Transform issues into flagged clauses
        issues = analysis_result.get("issues", [])
        flagged_clauses = []

        for i, issue in enumerate(issues):
            if issue.get("risk") in [
                "HIGH",
                "MEDIUM",
            ]:  # Only include HIGH and MEDIUM risks
                clause_id = str(i + 1)
                anchor = f"clause-{clause_id}"

                flagged_clauses.append(
                    FlaggedClause(
                        id=clause_id,
                        category=self._map_category(issue.get("category", "")),
                        risk=issue.get("risk", "MEDIUM"),
                        title=issue.get("clause", "")[
                            :50
                        ],  # Use first 50 chars as title
                        description=issue.get("rationale", ""),
                        anchor=anchor,
                    )
                )

        # Create artifacts with real paths from planner agent outputs
        artifacts = []

        # Add ICS file artifact if provided or exists
        # --- inside package_results ---

        # ICS artifact → serve by filename
        if ics_file_path and Path(ics_file_path).exists():
            ics_path = Path(ics_file_path)
            artifacts.append(Artifact(
                id="calendar", name="Meeting Schedule", type="ics",
                url=f"/download-file/{ics_path.name}"     # ← change
            ))
        else:
            ics_path = self.output_dir / "planner_event.ics"
            if ics_path.exists():
                artifacts.append(Artifact(
                    id="calendar", name="Meeting Schedule", type="ics",
                    url=f"/download-file/{ics_path.name}" # ← change
                ))

        # Email artifact (save JSON + create HTML in server/agents/outputs)
        if planner_email_output:
            # normalize to dict BEFORE using .get()
            obj = (planner_email_output.dict()
                if hasattr(planner_email_output, "dict") else
                planner_email_output)

            # save raw planner JSON (kept)
            (self.output_dir / "planner-agent.json").write_text(
                json.dumps(obj, ensure_ascii=False, indent=2), encoding="utf-8"
            )

            subject = (obj.get("subject") or "Legal Recommendations")
            body_text = (obj.get("body") or "")
            recommendations = (obj.get("recommendations") or [])

            body_html = "<br/>".join(body_text.split("\n"))
            html_email = f"""<!DOCTYPE html>
        <html>
        <head><meta charset="UTF-8"><title>{subject}</title></head>
        <body style="font-family:Arial,sans-serif;line-height:1.6;color:#333;">
        <h2>{subject}</h2>
        <div>{body_html}</div>
        </body>
        </html>"""

            html_filename = f"tenant_email_{datetime.now().strftime('%Y%m%d')}.html"
            (self.output_dir / html_filename).write_text(html_email, encoding="utf-8")
            print("generated html file")

            artifacts.append(Artifact(
                id="email",
                name="Legal Recommendations Email",
                type="email",
                url=f"/download-file/{html_filename}"  # ← serve from outputs via /download-file
            ))

        # Create the complete dashboard data
        dashboard_data = DashboardData(
            riskCounts=risk_counts, flaggedClauses=flagged_clauses, artifacts=artifacts
        )

        # Save to file for persistence
        with open(self.output_file, "w", encoding="utf-8") as f:
            json.dump(dashboard_data.model_dump(), f, ensure_ascii=False, indent=2)
            print(f"dumped at {Path(self.output_file)}")
        return dashboard_data

    def _map_category(self, category: str) -> str:
        """Map analysis categories to frontend categories."""
        category_map = {
            "unfair": "Unfair Clauses",
            "rights": "Your Rights",
            "stamp duty": "Stamp Duty",
            "legal": "Legal Issues",
            "financial": "Financial Terms",
        }

        for key, value in category_map.items():
            if key.lower() in category.lower():
                return value

        # Default category if no match
        return "Legal Issues"
